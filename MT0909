from dwave.system.samplers import DWaveSampler
from dwave.system.composites import EmbeddingComposite
import numpy as np
token = ''
endpoint = ''
A=10
B=5
C=100
D=50
#T: 輸送開始時刻数
T=int(input("輸送開始時刻数"))
N=int(input("荷積地点数"))
#R1: 道路1で輸送にかかるマスの数
#R2: 道路2で輸送にかかるマスの数
R1=int(input("設備Aからの輸送に必要なマス"))
R2=int(input("設備Bからの輸送に必要なマス"))
if N>2:
    R3=int(input("設備Cからの輸送に必要なマス"))
if N>3:
    R4=int(input("設備Dからの輸送に必要なマス"))
if N>4:
    R5=int(input("設備Eからの輸送に必要なマス"))
if N>5:
    R6=int(input("設備Fからの輸送に必要なマス"))
if N>6:
    R7=int(input("設備Gからの輸送に必要なマス"))
 H = np.zeros(N*T*N*T).reshape(N*T,N*T)
for i in range(N*T):
    H[(i,i)] = -A
    
for i in range(2*T):
    for j in range(2*T):
        if i < j:
            if j<=T-1:
                H[(i,j)] =H[(i,j)]+2*B
            if i>T-1:
                H[(i,j)] =H[(i,j)]+2*B
            if i<=T-1 and T-1<j:
                H[(i,j)] =H[(i,j)]-2*B
        if i==j:
            H[(i,i)] =H[(i,i)]+B
if N>2:
    for i in range(T):
        H[(i,i)] =H[(i,i)]+B
    for i in range(2*T, 3*T):
        H[(i,i)] =H[(i,i)]+B
    
    for i in range(3*T):
        for j in range(3*T):
            if i < j:
                if j<=T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i>2*T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i<=T-1 and 2*T-1<j:
                    H[(i,j)] =H[(i,j)]-2*B
if N>3:
    for i in range(T):
        H[(i,i)] =H[(i,i)]+B
    for i in range(3*T, 4*T):
        H[(i,i)] =H[(i,i)]+B
    
    for i in range(4*T):
        for j in range(4*T):
            if i < j:
                if j<=T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i>3*T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i<=T-1 and 3*T-1<j:
                    H[(i,j)] =H[(i,j)]-2*B
if N>4:
    for i in range(T):
        H[(i,i)] =H[(i,i)]+B
    for i in range(4*T, 5*T):
        H[(i,i)] =H[(i,i)]+B
    
    for i in range(5*T):
        for j in range(5*T):
            if i < j:
                if j<=T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i>4*T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i<=T-1 and 4*T-1<j:
                    H[(i,j)] =H[(i,j)]-2*B
if N>5:
    for i in range(T):
        H[(i,i)] =H[(i,i)]+B
    for i in range(5*T, 6*T):
        H[(i,i)] =H[(i,i)]+B
    
    for i in range(6*T):
        for j in range(6*T):
            if i < j:
                if j<=T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i>5*T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i<=T-1 and 5*T-1<j:
                    H[(i,j)] =H[(i,j)]-2*B
if N>6:
    for i in range(T):
        H[(i,i)] =H[(i,i)]+B
    for i in range(6*T, 7*T):
        H[(i,i)] =H[(i,i)]+B
    
    for i in range(7*T):
        for j in range(7*T):
            if i < j:
                if j<=T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i>2*T-1:
                    H[(i,j)] =H[(i,j)]+2*B
                if i<=T-1 and 6*T-1<j:
                    H[(i,j)] =H[(i,j)]-2*B
 for i in range(T-R1-1, T):
    H[(i,i)] = H[(i,i)]+C
for i in range(2*T-R2-1, 2*T):
    H[(i,i)] = H[(i,i)]+C
if N>2:
    for i in range(3*T-R3-1, 3*T):
        H[(i,i)] = H[(i,i)]+C
if N>3:
    for i in range(4*T-R4-1, 4*T):
        H[(i,i)] = H[(i,i)]+C
if N>4:
    for i in range(5*T-R5-1, 5*T):
        H[(i,i)] = H[(i,i)]+C
if N>5:
    for i in range(6*T-R6-1, 6*T):
        H[(i,i)] = H[(i,i)]+C
if N>6:
    for i in range(7*T-R7-1, 7*T):
        H[(i,i)] = H[(i,i)]+C
if N==2:
    for i in range(T+R1-R2):
        H[(i-R1+R2,i+T)] = H[(i-R1+R2,i+T)]+2*D

if N==3:
    for i in range(T+R1-R3):
        H[(i-R1+R2,i+T-R2+R2)] = H[(i-R1+R2,i+T-R2+R2)]+2*D
        H[(i-R1+R3,i+2*T)] = H[(i-R1+R3,i+2*T)]+2*D
        H[(i+T-R2+R3,i+2*T)] = H[(i+T-R2+R3,i+2*T)]+2*D
if N==4:
    for i in range(T+R1-R4):
        H[(i-R1+R2,i+T-R2+R2)] = H[(i-R1+R2,i+T-R2+R2)]+2*D
        H[(i-R1+R3,i+2*T-R3+R3)] = H[(i-R1+R3,i+2*T-R3+R3)]+2*D
        H[(i-R1+R4,i+3*T)] = H[(i-R1+R4,i+3*T)]+2*D
        
        H[(i+T-R2+R3,i+2*T-R3+R3)] = H[(i+T-R2+R3,i+2*T-R3+R3)]+2*D
        H[(i+T-R2+R4,i+3*T)] = H[(i+T-R2+R4,i+3*T)]+2*D
        
        H[(i+2*T-R3+R4,i+3*T)] = H[(i+2*T-R3+R4,i+3*T)]+2*D
        
if N==5:
    for i in range(T+R1-R5):
        H[(i-R1+R2,i+T-R2+R2)] = H[(i-R1+R2,i+T-R2+R2)]+2*D
        H[(i-R1+R3,i+2*T-R3+R3)] = H[(i-R1+R3,i+2*T-R3+R3)]+2*D
        H[(i-R1+R4,i+3*T-R4+R4)] = H[(i-R1+R4,i+3*T-R4+R4)]+2*D
        H[(i-R1+R5,i+4*T)] = H[(i-R1+R5,i+4*T)]+2*D
        
        H[(i+T-R2+R3,i+2*T-R3+R3)] = H[(i+T-R2+R3,i+2*T-R3+R3)]+2*D
        H[(i+T-R2+R4,i+3*T-R4+R4)] = H[(i+T-R2+R4,i+3*T-R4+R4)]+2*D
        H[(i+T-R2+R5,i+4*T)] = H[(i+T-R2+R5,i+4*T)]+2*D
        
        H[(i+2*T-R3+R4,i+3*T-R4+R4)] = H[(i+2*T-R3+R4,i+3*T-R4+R4)]+2*D
        H[(i+2*T-R3+R5,i+4*T)] = H[(i+2*T-R3+R5,i+4*T)]+2*D
        
        H[(i+3*T-R4+R5,i+4*T)] = H[(i+3*T-R4+R5,i+4*T)]+2*D
        
if N==6:
      for i in range(T+R1-R6):
        H[(i-R1+R2,i+T-R2+R2)] = H[(i-R1+R2,i+T-R2+R2)]+2*D
        H[(i-R1+R3,i+2*T-R3+R3)] = H[(i-R1+R3,i+2*T-R3+R3)]+2*D
        H[(i-R1+R4,i+3*T-R4+R4)] = H[(i-R1+R4,i+3*T-R4+R4)]+2*D
        H[(i-R1+R5,i+4*T-R5+R5)] = H[(i-R1+R5,i+4*T-R5+R5)]+2*D
        H[(i-R1+R6,i+5*T)] = H[(i-R1+R6,i+5*T)]+2*D
        
        H[(i+T-R2+R3,i+2*T-R3+R3)] = H[(i+T-R2+R3,i+2*T-R3+R3)]+2*D
        H[(i+T-R2+R4,i+3*T-R4+R4)] = H[(i+T-R2+R4,i+3*T-R4+R4)]+2*D
        H[(i+T-R2+R5,i+4*T-R5+R5)] = H[(i+T-R2+R5,i+4*T-R5+R5)]+2*D
        H[(i+T-R2+R6,i+5*T)] = H[(i+T-R2+R6,i+5*T)]+2*D
        
        H[(i+2*T-R3+R4,i+3*T-R4+R4)] = H[(i+2*T-R3+R4,i+3*T-R4+R4)]+2*D
        H[(i+2*T-R3+R5,i+4*T-R5+R5)] = H[(i+2*T-R3+R5,i+4*T-R5+R5)]+2*D
        H[(i+2*T-R3+R6,i+5*T)] = H[(i+2*T-R3+R6,i+5*T)]+2*D
        
        H[(i+3*T-R4+R5,i+4*T-R5+R5)] = H[(i+2*T-R4+R5,i+4*T-R5+R5)]+2*D
        H[(i+3*T-R4+R6,i+5*T)] = H[(i+3*T-R4+R6,i+5*T)]+2*D
        
        H[(i+3*T-R5+R6,i+5*T)] = H[(i+3*T-R5+R6,i+5*T)]+2*D
dw_sampler = DWaveSampler(solver='Advantage_system1.1', token=token)
sampler = EmbeddingComposite(dw_sampler)
sampleset = sampler.sample_qubo(H,num_reads=50)
